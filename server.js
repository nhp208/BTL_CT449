const express = require('express');
const cors = require('cors');
const path = require('path');
const { connectDB } = require('./config/database');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'client/dist')));

// K·∫øt n·ªëi MongoDB
let db = null;

async function initializeDatabase() {
  try {
    db = await connectDB();
    console.log("üöÄ Server s·∫µn s√†ng v·ªõi MongoDB");
  } catch (error) {
    console.error("‚ùå L·ªói kh·ªüi t·∫°o database:", error);
    process.exit(1);
  }
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i qu√° h·∫°n cho s√°ch ƒëang m∆∞·ª£n
async function updateOverdueStatus() {
  try {
    const muonsachCollection = db.collection('theodoimuonsach');
    const today = new Date();
    
    const overdueBooks = await muonsachCollection.find({
      TrangThai: 'ƒêang m∆∞·ª£n',
      NgayMuon: { $exists: true }
    }).toArray();

    for (const borrow of overdueBooks) {
      const borrowDate = new Date(borrow.NgayMuon);
      const dueDate = new Date(borrowDate);
      dueDate.setDate(dueDate.getDate() + 30); // Th·ªùi h·∫°n m∆∞·ª£n 30 ng√†y
      
      if (today > dueDate) {
        await muonsachCollection.updateOne(
          { _id: borrow._id },
          { $set: { TrangThai: 'Qu√° h·∫°n' } }
        );
      }
    }
  } catch (error) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i qu√° h·∫°n:", error);
  }
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i qu√° h·∫°n m·ªói khi c√≥ request
app.use(async (req, res, next) => {
  if (db) {
    await updateOverdueStatus();
  }
  next();
});

// Middleware ki·ªÉm tra database connection
app.use((req, res, next) => {
  if (!db) {
    return res.status(500).json({ success: false, message: 'Database ch∆∞a s·∫µn s√†ng' });
  }
  next();
});

// API Routes

// ƒêƒÉng nh·∫≠p
app.post('/api/login', async (req, res) => {
  const { username, password, role } = req.body;
  
  try {
    if (role === 'docgia') {
      const docgiaCollection = db.collection('docgia');
      const reader = await docgiaCollection.findOne({ MaDocGia: username });
      if (reader) {
        res.json({ success: true, user: reader, role: 'docgia' });
      } else {
        res.json({ success: false, message: 'M√£ ƒë·ªôc gi·∫£ kh√¥ng t·ªìn t·∫°i' });
      }
    } else if (role === 'nhanvien') {
      const nhanvienCollection = db.collection('nhanvien');
      const employee = await nhanvienCollection.findOne({ 
        MSNV: username, 
        Password: password 
      });
      if (employee) {
        res.json({ success: true, user: employee, role: 'nhanvien' });
      } else {
        res.json({ success: false, message: 'Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ƒë√∫ng' });
      }
    } else {
      res.json({ success: false, message: 'Vai tr√≤ kh√¥ng h·ª£p l·ªá' });
    }
  } catch (error) {
    console.error('‚ùå L·ªói ƒëƒÉng nh·∫≠p:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// L·∫•y danh s√°ch s√°ch
app.get('/api/sach', async (req, res) => {
  try {
    const sachCollection = db.collection('sach');
    const nhaxuatbanCollection = db.collection('nhaxuatban');
    const muonsachCollection = db.collection('theodoimuonsach');
    
    const sach = await sachCollection.find({}).toArray();
    const nhaxuatban = await nhaxuatbanCollection.find({}).toArray();
    
    // L·∫•y th√¥ng tin user t·ª´ query parameter (n·∫øu c√≥)
    const { user } = req.query;
    let userBorrowHistory = [];
    
    if (user) {
      userBorrowHistory = await muonsachCollection
        .find({ MaDocGia: user })
        .sort({ NgayMuon: 1 }) // S·∫Øp x·∫øp theo th·ª© t·ª± th·ªùi gian
        .toArray();
    }
    
    const sachWithNXB = sach.map(book => {
      const nxb = nhaxuatban.find(n => n.MANXB === book.MaNXB);
      
      // T√¨m l·ªãch s·ª≠ m∆∞·ª£n s√°ch c·ªßa user cho s√°ch n√†y
      const bookHistory = userBorrowHistory.filter(borrow => borrow.MaSach === book.MaSach);
      const latestBorrow = bookHistory.length > 0 ? bookHistory[bookHistory.length - 1] : null;
      
      return { 
        ...book, 
        TenNXB: nxb ? nxb.TenNXB : 'Kh√¥ng x√°c ƒë·ªãnh',
        UserStatus: latestBorrow ? latestBorrow.TrangThai : null,
        UserBorrowDate: latestBorrow ? latestBorrow.NgayMuon : null
      };
    });
    
    res.json(sachWithNXB);
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y danh s√°ch s√°ch:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// Th√™m s√°ch m·ªõi
app.post('/api/sach', async (req, res) => {
  try {
    const sachCollection = db.collection('sach');
    const count = await sachCollection.countDocuments();
    const newBook = {
      ...req.body,
      MaSach: `S${String(count + 1).padStart(3, '0')}`
    };
    
    await sachCollection.insertOne(newBook);
    res.json({ success: true, book: newBook });
  } catch (error) {
    console.error('‚ùå L·ªói th√™m s√°ch:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// C·∫≠p nh·∫≠t s√°ch
app.put('/api/sach/:maSach', async (req, res) => {
  try {
    const { maSach } = req.params;
    const sachCollection = db.collection('sach');
    
    // Lo·∫°i b·ªè _id kh·ªèi d·ªØ li·ªáu c·∫≠p nh·∫≠t
    const { _id, ...updateData } = req.body;
    
    const result = await sachCollection.updateOne(
      { MaSach: maSach },
      { $set: updateData }
    );
    
    if (result.matchedCount > 0) {
      const updatedBook = await sachCollection.findOne({ MaSach: maSach });
      res.json({ success: true, book: updatedBook });
    } else {
      res.json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y s√°ch' });
    }
  } catch (error) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t s√°ch:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// X√≥a s√°ch
app.delete('/api/sach/:maSach', async (req, res) => {
  try {
    const { maSach } = req.params;
    const sachCollection = db.collection('sach');
    
    const result = await sachCollection.deleteOne({ MaSach: maSach });
    
    if (result.deletedCount > 0) {
      res.json({ success: true });
    } else {
      res.json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y s√°ch' });
    }
  } catch (error) {
    console.error('‚ùå L·ªói x√≥a s√°ch:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// M∆∞·ª£n s√°ch
app.post('/api/muonsach', async (req, res) => {
  const { MaDocGia, MaSach } = req.body;
  const today = new Date().toISOString().split('T')[0];
  
  console.log('üîç M∆∞·ª£n s√°ch request:', { MaDocGia, MaSach, today });
  
  try {
    // Ki·ªÉm tra s√°ch c√≥ s·∫µn kh√¥ng
    const sachCollection = db.collection('sach');
    const book = await sachCollection.findOne({ MaSach: MaSach });
    console.log('üìñ S√°ch t√¨m th·∫•y:', book);
    
    if (!book || book.SoQuyen <= 0) {
      console.log('‚ùå S√°ch kh√¥ng c√≥ s·∫µn');
      return res.json({ success: false, message: 'S√°ch kh√¥ng c√≥ s·∫µn' });
    }
    
    // Ki·ªÉm tra ƒë·ªôc gi·∫£ c√≥ s√°ch qu√° h·∫°n kh√¥ng
    const muonsachCollection = db.collection('theodoimuonsach');
    const overdueBooks = await muonsachCollection.find({ 
      MaDocGia: MaDocGia, 
      TrangThai: 'Qu√° h·∫°n'
    }).toArray();
    
    if (overdueBooks.length > 0) {
      console.log('‚ùå ƒê·ªôc gi·∫£ c√≥ s√°ch qu√° h·∫°n:', overdueBooks.length, 'cu·ªën');
      return res.json({ 
        success: false, 
        message: `B·∫°n c√≥ ${overdueBooks.length} s√°ch qu√° h·∫°n. Vui l√≤ng tr·∫£ s√°ch ho·∫∑c li√™n h·ªá nh√¢n vi√™n ƒë·ªÉ x·ª≠ l√Ω ph·∫°t tr∆∞·ªõc khi m∆∞·ª£n s√°ch m·ªõi.` 
      });
    }
    
    // Ki·ªÉm tra ƒë·ªôc gi·∫£ ƒë√£ m∆∞·ª£n s√°ch n√†y ch∆∞a (bao g·ªìm c·∫£ qu√° h·∫°n)
    const existingBorrow = await muonsachCollection.findOne({ 
      MaDocGia: MaDocGia, 
      MaSach: MaSach, 
      TrangThai: { $in: ['ƒêang m∆∞·ª£n', 'Qu√° h·∫°n'] }
    });
    
    console.log('üîç Ki·ªÉm tra m∆∞·ª£n s√°ch hi·ªán t·∫°i:', existingBorrow);
    
    if (existingBorrow) {
      console.log('‚ùå ƒê√£ m∆∞·ª£n s√°ch n√†y r·ªìi');
      return res.json({ success: false, message: 'B·∫°n ƒë√£ m∆∞·ª£n s√°ch n√†y r·ªìi' });
    }
    
    // Th√™m v√†o danh s√°ch m∆∞·ª£n v·ªõi tr·∫°ng th√°i ch·ªù duy·ªát
    const newBorrow = {
      MaDocGia,
      MaSach,
      NgayMuon: today,
      NgayTra: null,
      TrangThai: 'Ch·ªù duy·ªát'
    };
    
    console.log('‚ûï Th√™m m∆∞·ª£n s√°ch m·ªõi:', newBorrow);
    
    const result = await muonsachCollection.insertOne(newBorrow);
    console.log('‚úÖ ƒê√£ th√™m m∆∞·ª£n s√°ch:', result);
    
    res.json({ success: true, message: 'Y√™u c·∫ßu m∆∞·ª£n s√°ch ƒë√£ ƒë∆∞·ª£c g·ª≠i, ch·ªù nh√¢n vi√™n duy·ªát' });
  } catch (error) {
    console.error('‚ùå L·ªói m∆∞·ª£n s√°ch:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// Duy·ªát y√™u c·∫ßu m∆∞·ª£n s√°ch
app.post('/api/duyet-muonsach', async (req, res) => {
  const { MaDocGia, MaSach, action } = req.body; // action: 'approve' ho·∫∑c 'reject'
  
  try {
    const muonsachCollection = db.collection('theodoimuonsach');
    const borrow = await muonsachCollection.findOne({ 
      MaDocGia: MaDocGia, 
      MaSach: MaSach, 
      TrangThai: 'Ch·ªù duy·ªát'
    });
    
    if (!borrow) {
      return res.json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu m∆∞·ª£n s√°ch' });
    }
    
    if (action === 'approve') {
      // Ki·ªÉm tra s√°ch c√≥ s·∫µn kh√¥ng
      const sachCollection = db.collection('sach');
      const book = await sachCollection.findOne({ MaSach: MaSach });
      if (!book || book.SoQuyen <= 0) {
        return res.json({ success: false, message: 'S√°ch kh√¥ng c√≥ s·∫µn ƒë·ªÉ duy·ªát' });
      }
      
      // Duy·ªát y√™u c·∫ßu
      await muonsachCollection.updateOne(
        { _id: borrow._id },
        { $set: { TrangThai: 'ƒêang m∆∞·ª£n' } }
      );
      await sachCollection.updateOne(
        { MaSach: MaSach },
        { $inc: { SoQuyen: -1 } }
      );
      
      res.json({ success: true, message: 'ƒê√£ duy·ªát y√™u c·∫ßu m∆∞·ª£n s√°ch' });
    } else if (action === 'reject') {
      // T·ª´ ch·ªëi y√™u c·∫ßu
      await muonsachCollection.deleteOne({ _id: borrow._id });
      res.json({ success: true, message: 'ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu m∆∞·ª£n s√°ch' });
    } else {
      res.json({ success: false, message: 'H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá' });
    }
  } catch (error) {
    console.error('‚ùå L·ªói duy·ªát y√™u c·∫ßu m∆∞·ª£n s√°ch:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// L·∫•y danh s√°ch y√™u c·∫ßu ch·ªù duy·ªát
app.get('/api/yeucau-choduyet', async (req, res) => {
  try {
    const muonsachCollection = db.collection('theodoimuonsach');
    const sachCollection = db.collection('sach');
    const docgiaCollection = db.collection('docgia');

    const pendingRequests = await muonsachCollection
      .find({ TrangThai: 'Ch·ªù duy·ªát' })
      .toArray();

    const requestsWithDetails = await Promise.all(pendingRequests.map(async borrow => {
      const book = await sachCollection.findOne({ MaSach: borrow.MaSach });
      const reader = await docgiaCollection.findOne({ MaDocGia: borrow.MaDocGia });
      return {
        ...borrow,
        TenSach: book ? book.TenSach : 'Kh√¥ng x√°c ƒë·ªãnh',
        TenDocGia: reader ? `${reader.HoLot} ${reader.Ten}` : 'Kh√¥ng x√°c ƒë·ªãnh',
        SoQuyen: book ? book.SoQuyen : 0
      };
    }));

    res.json(requestsWithDetails);
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y danh s√°ch y√™u c·∫ßu ch·ªù duy·ªát:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// Tr·∫£ s√°ch
app.post('/api/trasach', async (req, res) => {
  const { MaDocGia, MaSach } = req.body;
  const today = new Date().toISOString().split('T')[0];
  
  try {
    const muonsachCollection = db.collection('theodoimuonsach');
    const sachCollection = db.collection('sach');

    const borrow = await muonsachCollection.findOne({ 
      MaDocGia: MaDocGia, 
      MaSach: MaSach, 
      TrangThai: { $in: ['ƒêang m∆∞·ª£n', 'Qu√° h·∫°n'] }
    });
    
    if (!borrow) {
      return res.json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin m∆∞·ª£n s√°ch' });
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i tr·∫£ s√°ch
    await muonsachCollection.updateOne(
      { _id: borrow._id },
      { $set: { NgayTra: today, TrangThai: 'ƒê√£ tr·∫£' } }
    );
    
    // TƒÉng s·ªë l∆∞·ª£ng s√°ch
    await sachCollection.updateOne(
      { MaSach: MaSach },
      { $inc: { SoQuyen: 1 } }
    );
    
    res.json({ success: true, message: 'Tr·∫£ s√°ch th√†nh c√¥ng' });
  } catch (error) {
    console.error('‚ùå L·ªói tr·∫£ s√°ch:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// L·∫•y l·ªãch s·ª≠ m∆∞·ª£n s√°ch c·ªßa ƒë·ªôc gi·∫£
app.get('/api/muonsach/:maDocGia', async (req, res) => {
  const { maDocGia } = req.params;
  console.log('üîç L·∫•y l·ªãch s·ª≠ m∆∞·ª£n s√°ch cho:', maDocGia);
  
  try {
    const muonsachCollection = db.collection('theodoimuonsach');
    const sachCollection = db.collection('sach');

    const borrowHistory = await muonsachCollection
      .find({ MaDocGia: maDocGia })
      .toArray();

    console.log('üìã L·ªãch s·ª≠ m∆∞·ª£n s√°ch th√¥:', borrowHistory);

    const historyWithDetails = await Promise.all(borrowHistory.map(async borrow => {
      const book = await sachCollection.findOne({ MaSach: borrow.MaSach });
      return {
        ...borrow,
        TenSach: book ? book.TenSach : 'Kh√¥ng x√°c ƒë·ªãnh'
      };
    }));

    console.log('üìã L·ªãch s·ª≠ m∆∞·ª£n s√°ch v·ªõi chi ti·∫øt:', historyWithDetails);
    res.json(historyWithDetails);
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y l·ªãch s·ª≠ m∆∞·ª£n s√°ch:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// L·∫•y t·∫•t c·∫£ l·ªãch s·ª≠ m∆∞·ª£n s√°ch (cho qu·∫£n l√Ω)
app.get('/api/muonsach', async (req, res) => {
  try {
    const muonsachCollection = db.collection('theodoimuonsach');
    const sachCollection = db.collection('sach');
    const docgiaCollection = db.collection('docgia');

    const allBorrows = await muonsachCollection.find({}).toArray();

    const borrowsWithDetails = await Promise.all(allBorrows.map(async borrow => {
      const book = await sachCollection.findOne({ MaSach: borrow.MaSach });
      const reader = await docgiaCollection.findOne({ MaDocGia: borrow.MaDocGia });
      return {
        ...borrow,
        TenSach: book ? book.TenSach : 'Kh√¥ng x√°c ƒë·ªãnh',
        TenDocGia: reader ? `${reader.HoLot} ${reader.Ten}` : 'Kh√¥ng x√°c ƒë·ªãnh'
      };
    }));

    res.json(borrowsWithDetails);
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y t·∫•t c·∫£ l·ªãch s·ª≠ m∆∞·ª£n s√°ch:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// L·∫•y danh s√°ch ƒë·ªôc gi·∫£
app.get('/api/docgia', async (req, res) => {
  try {
    const docgiaCollection = db.collection('docgia');
    const docgia = await docgiaCollection.find({}).toArray();
    res.json(docgia);
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y danh s√°ch ƒë·ªôc gi·∫£:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// Th√™m ƒë·ªôc gi·∫£ m·ªõi
app.post('/api/docgia', async (req, res) => {
  try {
    const docgiaCollection = db.collection('docgia');
    const count = await docgiaCollection.countDocuments();
    const newReader = {
      ...req.body,
      MaDocGia: `DG${String(count + 1).padStart(3, '0')}`
    };
    
    await docgiaCollection.insertOne(newReader);
    res.json({ success: true, reader: newReader });
  } catch (error) {
    console.error('‚ùå L·ªói th√™m ƒë·ªôc gi·∫£:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// C·∫≠p nh·∫≠t th√¥ng tin ƒë·ªôc gi·∫£
app.put('/api/docgia/:maDocGia', async (req, res) => {
  const { maDocGia } = req.params;
  try {
    const docgiaCollection = db.collection('docgia');
    
    // Lo·∫°i b·ªè _id kh·ªèi d·ªØ li·ªáu c·∫≠p nh·∫≠t
    const { _id, ...updateData } = req.body;
    
    const result = await docgiaCollection.updateOne(
      { MaDocGia: maDocGia },
      { $set: updateData }
    );
    if (result.matchedCount > 0) {
      const updatedReader = await docgiaCollection.findOne({ MaDocGia: maDocGia });
      res.json({ success: true, reader: updatedReader });
    } else {
      res.json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ƒë·ªôc gi·∫£' });
    }
  } catch (error) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t ƒë·ªôc gi·∫£:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// X√≥a ƒë·ªôc gi·∫£
app.delete('/api/docgia/:maDocGia', async (req, res) => {
  const { maDocGia } = req.params;
  try {
    const docgiaCollection = db.collection('docgia');
    const result = await docgiaCollection.deleteOne({ MaDocGia: maDocGia });
    if (result.deletedCount > 0) {
      res.json({ success: true });
    } else {
      res.json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ƒë·ªôc gi·∫£' });
    }
  } catch (error) {
    console.error('‚ùå L·ªói x√≥a ƒë·ªôc gi·∫£:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// L·∫•y danh s√°ch nh√¢n vi√™n
app.get('/api/nhanvien', async (req, res) => {
  try {
    const nhanvienCollection = db.collection('nhanvien');
    const nhanvien = await nhanvienCollection.find({}).toArray();
    // Kh√¥ng tr·∫£ v·ªÅ password v√¨ l√Ω do b·∫£o m·∫≠t
    const nhanvienWithoutPassword = nhanvien.map(nv => {
      const { Password, ...nvWithoutPassword } = nv;
      return nvWithoutPassword;
    });
    res.json(nhanvienWithoutPassword);
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y danh s√°ch nh√¢n vi√™n:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// Th√™m nh√¢n vi√™n m·ªõi
app.post('/api/nhanvien', async (req, res) => {
  try {
    const nhanvienCollection = db.collection('nhanvien');
    const count = await nhanvienCollection.countDocuments();
    const newEmployee = {
      ...req.body,
      MSNV: `NV${String(count + 1).padStart(3, '0')}`
    };
    
    await nhanvienCollection.insertOne(newEmployee);
    res.json({ success: true, employee: newEmployee });
  } catch (error) {
    console.error('‚ùå L·ªói th√™m nh√¢n vi√™n:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n
app.put('/api/nhanvien/:msnv', async (req, res) => {
  const { msnv } = req.params;
  try {
    const nhanvienCollection = db.collection('nhanvien');
    
    // Lo·∫°i b·ªè _id kh·ªèi d·ªØ li·ªáu c·∫≠p nh·∫≠t
    const { _id, ...updateData } = req.body;
    
    const result = await nhanvienCollection.updateOne(
      { MSNV: msnv },
      { $set: updateData }
    );
    if (result.matchedCount > 0) {
      const updatedEmployee = await nhanvienCollection.findOne({ MSNV: msnv });
      res.json({ success: true, employee: updatedEmployee });
    } else {
      res.json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n' });
    }
  } catch (error) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t nh√¢n vi√™n:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// X√≥a nh√¢n vi√™n
app.delete('/api/nhanvien/:msnv', async (req, res) => {
  const { msnv } = req.params;
  try {
    const nhanvienCollection = db.collection('nhanvien');
    const result = await nhanvienCollection.deleteOne({ MSNV: msnv });
    if (result.deletedCount > 0) {
      res.json({ success: true });
    } else {
      res.json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n' });
    }
  } catch (error) {
    console.error('‚ùå L·ªói x√≥a nh√¢n vi√™n:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// X·ª≠ l√Ω ph·∫°t qu√° h·∫°n
app.post('/api/xuly-phat', async (req, res) => {
  const { MaDocGia, MaSach, penaltyAmount, penaltyNote } = req.body;
  
  try {
    const muonsachCollection = db.collection('theodoimuonsach');
    
    // T√¨m s√°ch qu√° h·∫°n
    const overdueBook = await muonsachCollection.findOne({
      MaDocGia: MaDocGia,
      MaSach: MaSach,
      TrangThai: 'Qu√° h·∫°n'
    });
    
    if (!overdueBook) {
      return res.json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y s√°ch qu√° h·∫°n' });
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh "ƒê√£ tr·∫£" v√† th√™m th√¥ng tin ph·∫°t
    const updateData = {
      TrangThai: 'ƒê√£ tr·∫£',
      NgayTra: new Date().toISOString().split('T')[0],
      PenaltyInfo: {
        amount: penaltyAmount,
        note: penaltyNote,
        processedDate: new Date().toISOString(),
        overdueDays: Math.max(0, Math.ceil((new Date() - new Date(overdueBook.NgayMuon)) / (1000 * 60 * 60 * 24)) - 30)
      }
    };
    
    await muonsachCollection.updateOne(
      { _id: overdueBook._id },
      { $set: updateData }
    );
    
    // TƒÉng s·ªë l∆∞·ª£ng s√°ch c√≥ s·∫µn
    const sachCollection = db.collection('sach');
    await sachCollection.updateOne(
      { MaSach: MaSach },
      { $inc: { SoQuyen: 1 } }
    );
    
    res.json({ 
      success: true, 
      message: `ƒê√£ x·ª≠ l√Ω ph·∫°t ${penaltyAmount.toLocaleString('vi-VN')} VNƒê cho ƒë·ªôc gi·∫£ ${MaDocGia}` 
    });
  } catch (error) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω ph·∫°t:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// ===== API QU·∫¢N L√ù NH√Ä XU·∫§T B·∫¢N =====

// L·∫•y danh s√°ch nh√† xu·∫•t b·∫£n
app.get('/api/nhaxuatban', async (req, res) => {
  try {
    const nhaxuatbanCollection = db.collection('nhaxuatban');
    const publishers = await nhaxuatbanCollection.find({}).toArray();
    res.json(publishers || []);
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y danh s√°ch nh√† xu·∫•t b·∫£n:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// Th√™m nh√† xu·∫•t b·∫£n m·ªõi
app.post('/api/nhaxuatban', async (req, res) => {
  const { MaNXB, TenNXB, DiaChi } = req.body;
  
  try {
    const nhaxuatbanCollection = db.collection('nhaxuatban');
    
    // Ki·ªÉm tra m√£ nh√† xu·∫•t b·∫£n ƒë√£ t·ªìn t·∫°i
    const existingPublisher = await nhaxuatbanCollection.findOne({ MaNXB: MaNXB });
    if (existingPublisher) {
      return res.json({ success: false, message: 'M√£ nh√† xu·∫•t b·∫£n ƒë√£ t·ªìn t·∫°i' });
    }
    
    const newPublisher = {
      MaNXB,
      TenNXB,
      DiaChi
    };
    
    await nhaxuatbanCollection.insertOne(newPublisher);
    res.json({ success: true, message: 'Th√™m nh√† xu·∫•t b·∫£n th√†nh c√¥ng' });
  } catch (error) {
    console.error('‚ùå L·ªói th√™m nh√† xu·∫•t b·∫£n:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// C·∫≠p nh·∫≠t nh√† xu·∫•t b·∫£n
app.put('/api/nhaxuatban/:manxb', async (req, res) => {
  const { manxb } = req.params;
  const { TenNXB, DiaChi } = req.body;
  
  try {
    const nhaxuatbanCollection = db.collection('nhaxuatban');
    const result = await nhaxuatbanCollection.updateOne(
      { MaNXB: manxb },
      { $set: { TenNXB, DiaChi } }
    );
    
    if (result.modifiedCount > 0) {
      res.json({ success: true, message: 'C·∫≠p nh·∫≠t nh√† xu·∫•t b·∫£n th√†nh c√¥ng' });
    } else {
      res.json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y nh√† xu·∫•t b·∫£n' });
    }
  } catch (error) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t nh√† xu·∫•t b·∫£n:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// X√≥a nh√† xu·∫•t b·∫£n
app.delete('/api/nhaxuatban/:manxb', async (req, res) => {
  const { manxb } = req.params;
  
  try {
    const nhaxuatbanCollection = db.collection('nhaxuatban');
    
    // Ki·ªÉm tra xem c√≥ s√°ch n√†o ƒëang s·ª≠ d·ª•ng nh√† xu·∫•t b·∫£n n√†y kh√¥ng
    const sachCollection = db.collection('sach');
    const booksUsingPublisher = await sachCollection.findOne({ MaNXB: manxb });
    
    if (booksUsingPublisher) {
      return res.json({ 
        success: false, 
        message: 'Kh√¥ng th·ªÉ x√≥a nh√† xu·∫•t b·∫£n v√¨ c√≥ s√°ch ƒëang s·ª≠ d·ª•ng' 
      });
    }
    
    const result = await nhaxuatbanCollection.deleteOne({ MaNXB: manxb });
    if (result.deletedCount > 0) {
      res.json({ success: true, message: 'X√≥a nh√† xu·∫•t b·∫£n th√†nh c√¥ng' });
    } else {
      res.json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y nh√† xu·∫•t b·∫£n' });
    }
  } catch (error) {
    console.error('‚ùå L·ªói x√≥a nh√† xu·∫•t b·∫£n:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
});

// Serve React app
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'client/dist/index.html'));
});

// Kh·ªüi t·∫°o database v√† start server
async function startServer() {
  try {
    await initializeDatabase();
    app.listen(PORT, () => {
      console.log(`üöÄ Server ƒëang ch·∫°y tr√™n port ${PORT}`);
      console.log(`üìä Database: MongoDB`);
      console.log(`üåê Frontend: http://localhost:${PORT}`);
    });
  } catch (error) {
    console.error('‚ùå L·ªói kh·ªüi ƒë·ªông server:', error);
    process.exit(1);
  }
}

startServer(); 